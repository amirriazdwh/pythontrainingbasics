# there are two types of docker commands.
1.  Managment commands
2.  operational commands. 

# managment commands perform. building docker image,  network, configuration, 
# nodes query,  service managment volume creation , image compose

builder     Manage builds
  buildx*     Build with BuildKit (Docker Inc., v0.6.3)
  compose*    Docker Compose (Docker Inc., v2.1.1)
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  scan*       Docker Scan (Docker Inc., 0.9.0)
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes
  
Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes




# find stopped containers 
docker ps -a 
docker ps -f "status=exited"
docker container ls -f 'status=exited' -f 'status=dead' -f 'status=created'


# docker rm container
docker container rm $(docker container ls -q -f 'status=exited' -f 'exited=0')

#start a container 
docker container start ORCLCBD

#container stats
docker container stats ORCLCBD

#stop container 
docker container stop ORCLCBD


#pull image and start
docker run -d -it --name ORCLCBD store/oracle/database-enterprise:12.2.0.1

docker run -d -it --name ORCLCBD -p 1521:1521 --network Oracle_Network  store/oracle/database-enterprise:12.2.0.1
docker run -d -it --name ORCLCBD -p 1521:1521 --network Oracle_Network  store/oracle/database-enterprise:12.2.0.1

docker run -d -it --name ORCL --network host  store/oracle/database-enterprise:12.2.0.1


# docker pull
docker pull bitnami/kafka:2.8.1


docker exec -u -it ORCL
docker exec --interactive --tty --user root  bash

#login in root 
docker exec --interactive --tty --user root --workdir / ORCLCBD bash

# login as default user
docker exec --interactive --tty --user oracle  ORCLCBD bash
docker exec -it ORCLCBD bash -c "source /home/oracle/.bashrc; sqlplus /nolog"


docker network ls
docker network create --driver=bridge spark_network
docker network rm spark_network
docker network inspect spark_network

docker attach ORCLCBD

When containers are run with the interactive option, you can connect to the container and enter commands as if you are on the terminal:

$ docker run -itd --name busybox busybox
dcaecf3335f9142e8c70a2ae05a386395b49d610be345b3a12d2961fccab1478

$ docker attach busybox
/ # echo hello world
hello world
