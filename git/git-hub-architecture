# Summary of Git and GitHub Concepts Discussed

## **1. Git Local Repository & `.git/` Folder**
- When you **clone** a repository, Git copies all files and creates a `.git/` folder.
- `.git/` contains metadata, commit history, blobs, trees, and references.
- If you **delete `.git/`**, the project loses all version history.

## **2. Blobs, Trees, and Commits (Gitâ€™s Internal Storage)**
### **Blobs**
- Blobs (**Binary Large Objects**) store **file contents**.
- Each file version is saved as a new **blob**, even for small changes.
- Blobs do **not track changes**, only full file contents.

### **Trees**
- A **tree** is a snapshot of the project at a commit.
- It contains **references to blobs** and subdirectories.
- Trees organize the structure of files but do not store their content.

### **Commits**
- A **commit is a snapshot** that records a tree.
- Each commit **links to a parent commit**, forming a chain.
- Commits store:
  - A reference to the **tree** (file structure at that moment).
  - A reference to the **previous commit** (history tracking).
  - Metadata (author, date, message).

## **3. How `git add` and `git commit` Work**
| Git Command               | Action                                                                                          |
|---------------------------|------------------------------------------------------------------------------------------------|
| `git add .`               | Creates **new blobs** for modified files and updates the **tree**.                              |
| `git commit -m "Message"` | Creates a **new commit** that references the updated tree and **links to the previous commit**. |

- **Commits donâ€™t store diffs; they store full snapshots.**
- **Git compares trees to detect changes (`git diff`).**

## **4. How Git Detects Changes**
1. Git calculates **SHA-1 hashes** for each file.
2. It compares the current fileâ€™s hash to the **staged version**.
3. If hashes differ, Git marks the file as **modified** (`git status`).

## **5. Commit Linking: Reference vs. Time**
âœ… **Commits are linked by reference (SHA-1), NOT by time.**
- Each commit points to a **parent commit** (except the first one).
- This **forms a chain of commits** that Git follows.
- **Timestamps are recorded but do not determine commit order.**

### **Viewing Commit References**
```sh
git log --pretty=oneline
```
- This command shows commit hashes and messages.
- Commits are ordered based on **references, not time**.

## **6. Viewing Git Snapshots and Changes**
| Git Command                  | Purpose                                           |
|------------------------------|---------------------------------------------------|
| `git ls-tree -r HEAD`        | View the blobs (files) in the latest commit.     |
| `git cat-file -p <blob_hash>` | See the content of a specific blob.              |
| `git log --oneline --graph`  | View commit history as a tree.                   |
| `git diff HEAD~1`            | Compare the last two commits.                    |

## **7. How GitHub Stores Repositories**
- **GitHub is a remote Git hosting service**.
- It follows the same snapshot model:
  - Each push updates commits (snapshots).
  - GitHub does **not store diffs**â€”it references commits.
- `.git/` on GitHub is managed by the platform.

## **8. Handling Unnecessary Files**
- Some files (e.g., `.idea/`, `.mypy_cache/`) should **not be tracked**.
- Use `.gitignore` to prevent Git from adding them.

```sh
echo ".idea/" >> .gitignore
git rm -r --cached .idea/
git commit -m "Ignored .idea folder"
```

## **9. Understanding the Commit Log Output**
### Example Log Entry:
```
commit b63a3e051192acb95104530117b7de1bc2005b55 (HEAD -> master, github/master)
Author: amirriazdwh <amir.riaz.dwh@gmail.com>
Date:   2025-02-09 14:17:10 +0400

    removing pycharm dependencies
```
| Part               | Meaning                                                             |
|--------------------|---------------------------------------------------------------------|
| **Commit Hash**    | `b63a3e0...` â†’ Unique ID for the commit.                           |
| **HEAD -> master** | Your local `master` branch points to this commit.                 |
| **github/master**  | This commit matches the remote branch on GitHub.                  |
| **Author**         | `amirriazdwh <amir.riaz.dwh@gmail.com>` created the commit.       |
| **Date**           | `2025-02-09 14:17:10 +0400` (UTC+4).                               |
| **Message**        | "removing pycharm dependencies" explains the purpose of the commit. |

## **10. Useful Git Commands for Checking Pending Changes**
### **Show Modified but Unstaged Files**
```sh
git diff --name-only
```
ðŸ”¹ Lists files that have changes but are not staged.

### **Show Detailed Differences Before Staging**
```sh
git diff
```
ðŸ”¹ Shows exact line-by-line changes in unstaged files.

### **Show Files Ready for Commit (Already Staged)**
```sh
git diff --staged
```
ðŸ”¹ Shows changes that are staged but not yet committed.

## **11. Summary of Key Git and GitHub Concepts**
âœ… **Git tracks full file snapshots, not just diffs.**  
âœ… **Blobs store file content, trees store structure, commits track history.**  
âœ… **Commits are linked by reference (SHA-1), not timestamps.**  
âœ… **GitHub follows the same snapshot storage system.**  
âœ… **`git add` stages new blobs; `git commit` links commits in a chain.**  
âœ… **Changes are detected by hashing file content.**  
âœ… **Git compares trees between commits to identify differences (`git diff`).**  
âœ… **Remote repositories on GitHub store commit history but do not track diffs.**  
âœ… **`.gitignore` helps exclude unnecessary files from version control.**  

Would you like to explore this further in your own repository? ðŸš€


## 12 if git does not work. 
git fsck 
## this will provide dangling blobs.   use
git prune 
## remove the dangling check file pending to be added to stage.
git status. 
## commit 
git commit -m "type the message here"
# push to remote repo.
git push.